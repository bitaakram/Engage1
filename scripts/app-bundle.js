define('activity1',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var myApp;
    var responseText;
    var targetHeading;
    var myApp;
    var ball1;
    var ball2;
    var cursor;
    var EntityProperties = {};
    function preload() {
        myApp.game.load.image('wizball', 'assets/wizball.png');
        myApp.game.load.image('redball', 'assets/redwizball.png');
        myApp.game.load.image('blueball', 'assets/bluewizball.png');
        myApp.game.load.image('Man1', 'assets/Man1.png');
        myApp.game.load.image('Man2', 'assets/Man2.png');
        myApp.game.load.image('Woman1', 'assets/Woman1.png');
        myApp.game.load.image('Woman2', 'assets/Woman2.png');
        myApp.game.load.image('Man1Sick', 'assets/Man1_sick.png');
        myApp.game.load.image('Man2Sick', 'assets/Man2_sick.png');
        myApp.game.load.image('Woman1Sick', 'assets/Woman1_sick.png');
        myApp.game.load.image('Woman2Sick', 'assets/Woman2_sick.png');
    }
    function create() {
        myApp.game.stage.backgroundColor = "#dbd6d7";
        myApp.game.physics.startSystem(Phaser.Physics.ARCADE);
    }
    function update() {
    }
    function SetCharacteristics(type, age, status) {
        EntityProperties.type = type;
        EntityProperties.age = age;
        EntityProperties.status = status;
    }
    function GetCharacteristics() {
        var allXml = Blockly.Xml.workspaceToDom(myApp.workspace).childNodes;
        for (var i = 0; xml = allXml[i]; i++) {
            var xml = allXml[i];
            if (xml.getAttribute('type') == 'entity') {
                var in1 = xml.firstElementChild.firstElementChild;
                var headless = new Blockly.Workspace();
                Blockly.Xml.domToBlock(in1, headless);
                var code = Blockly.JavaScript.workspaceToCode(headless);
                var interpreter = new Interpreter(code, myApp.initApi);
                interpreter.run();
                headless.dispose();
            }
        }
    }
    function CreateLargeEntity(entityLabel) {
        GetCharacteristics();
        var spriteName = EntityProperties.type;
        if (EntityProperties.status == "Sick") {
            spriteName += "Sick";
        }
        var c = myApp.game.add.sprite(200, 200, spriteName);
        c.scale = new Phaser.Point(1, 1);
        c.anchor.set(.5);
        c.type = EntityProperties.type;
        c.age = EntityProperties.age;
        c.status = EntityProperties.status;
        var style = { font: "16px Courier", fill: "#000000" };
        var text1 = myApp.game.add.text(0, 0, "Age: " + c.age.toString(), style);
        var text2 = myApp.game.add.text(0, 0, "Type: " + c.type, style);
        var text3 = myApp.game.add.text(0, 0, "Status: " + c.status, style);
        text1.alignTo(c, Phaser.RIGHT_TOP, 16);
        text2.alignTo(c, Phaser.RIGHT_CENTER, 16);
        text3.alignTo(c, Phaser.RIGHT_BOTTOM, 16);
    }
    function MoveBallRight() {
        ball1.body.velocity.x = 100;
    }
    function ResetPhaser() {
        myApp.game.world.removeAll(true, false, false);
        create();
    }
    function updateHeading(gameObj) {
        try {
            gameObj.forEach(function (element) {
                if (Math.floor(Math.random() * 20) === 0) {
                    var angle = 90 * (Math.PI / 180);
                    var DIST = 200;
                    var offset = (Math.floor(Math.random() * angle) - angle / 2);
                    var newX = element.position.x + Math.cos(element.rotation + offset) * DIST;
                    var newY = element.position.y + Math.sin(element.rotation + offset) * DIST;
                    element.heading = {
                        x: newX,
                        y: newY
                    };
                    myApp.game.physics.arcade.moveToXY(element, element.heading.x, element.heading.y);
                    var dx = element.heading.x - element.position.x;
                    var dy = element.heading.y - element.position.y;
                    element.rotation = Math.atan2(dy, dx);
                }
            });
        }
        catch (err) {
            console.log(err.message);
        }
    }
    var Activity1 = (function () {
        function Activity1() {
            this.workspace = {};
            this.interpreter = {};
            this.game = {};
            this.healthyPersons = {};
            this.infectedPersons = {};
            this.healers = {};
            this.TimeStamp = 0;
            myApp = this;
        }
        Activity1.prototype.attached = function () {
            this.toolbox = this.LoadToolbox();
            this.game = new Phaser.Game(600, 600, Phaser.AUTO, 'phaserDiv', { preload: preload, create: create, update: update });
        };
        Activity1.prototype.detached = function () {
            myApp.game.destroy();
        };
        Activity1.prototype.HttpClient = function () {
            this.get = function (aUrl, aCallback) {
                var anHttpRequest = new XMLHttpRequest();
                anHttpRequest.onreadystatechange = function () {
                    if (anHttpRequest.readyState == 4 && anHttpRequest.status == 200)
                        aCallback(anHttpRequest.responseText);
                };
                anHttpRequest.open("GET", aUrl, true);
                anHttpRequest.send(null);
            };
        };
        Activity1.prototype.SaveWorkspace = function () {
            var xml = Blockly.Xml.workspaceToDom(this.workspace);
            var xml_text = Blockly.Xml.domToPrettyText(xml);
            this.export(xml_text);
        };
        Activity1.prototype.export = function (text) {
            var pom = document.createElement('a');
            pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            pom.setAttribute('download', 'workspace.xml');
            pom.style.display = 'none';
            document.body.appendChild(pom);
            pom.click();
            document.body.removeChild(pom);
        };
        Activity1.prototype.LoadWorkspaceCallback = function (ResponseText) {
            var xml_text = ResponseText;
            var xml = Blockly.Xml.textToDom(xml_text);
            myApp.workspace.clear();
            Blockly.Xml.domToWorkspace(xml, myApp.workspace);
        };
        Activity1.prototype.LoadWorkspace = function () {
            var url = "resources/workspace.xml";
            var client = new this.HttpClient();
            client.get(url, this.LoadWorkspaceCallback);
        };
        Activity1.prototype.LoadToolBoxCallback = function (ResponseText) {
            var xml_text = ResponseText;
            var xml = Blockly.Xml.textToDom(xml_text);
            myApp.toolbox = xml;
            myApp.workspace = Blockly.inject('blocklyDiv', { media: '../Blockly/media/',
                toolbox: myApp.toolbox });
        };
        Activity1.prototype.LoadToolbox = function () {
            var url = "resources/EpidemicToolbox.xml";
            var client = new this.HttpClient();
            client.get(url, this.LoadToolBoxCallback);
        };
        Activity1.prototype.ResetPhaser = function () {
            myApp.game.world.removeAll(true, false, false);
            create();
        };
        Activity1.prototype.setColor = function (targetColor) {
            if (targetColor == "RED") {
                ball2.loadTexture('redball');
            }
            else if (targetColor == "BLUE") {
                ball2.loadTexture('blueball');
            }
            myApp.game.physics.arcade.collide(ball1, ball2);
        };
        Activity1.prototype.handleCollision = function () {
            var allXml = Blockly.Xml.workspaceToDom(this.workspace).childNodes;
            for (var i = 0; xml = allXml[i]; i++) {
                var xml = allXml[i];
                if (xml.getAttribute('type') == 'collision') {
                    var headless = new Blockly.Workspace();
                    Blockly.Xml.domToBlock(xml, headless);
                    var code = Blockly.JavaScript.workspaceToCode(headless);
                    var interpreter = new Interpreter(code, this.initApi);
                    interpreter.run();
                    headless.dispose();
                }
            }
        };
        Activity1.prototype.HealthyInfectedCollision = function (healthy, infected) {
            healthy.loadTexture('redball');
            myApp.healthyPersons.remove(healthy);
            myApp.infectedPersons.add(healthy);
        };
        Activity1.prototype.HealerInfectedCollision = function (healer, infected) {
            infected.loadTexture('wizball');
            myApp.infectedPersons.remove(infected);
            myApp.healthyPersons.add(infected);
        };
        Activity1.prototype.runSimulation = function () {
            myApp.ResetPhaser();
            var test = Blockly.JavaScript.workspaceToCode(this.workspace);
            console.log(test);
            var allXml = Blockly.Xml.workspaceToDom(this.workspace).childNodes;
            for (var i = 0; xml = allXml[i]; i++) {
                var xml = allXml[i];
                if (xml.getAttribute('type') == 'simulation') {
                    var headless = new Blockly.Workspace();
                    Blockly.Xml.domToBlock(xml, headless);
                    var code = Blockly.JavaScript.workspaceToCode(headless);
                    var interpreter = new Interpreter(code, this.initApi);
                    interpreter.run();
                    headless.dispose();
                }
            }
        };
        Activity1.prototype.runCode = function () {
            this.paralellTest();
            var code = Blockly.JavaScript.workspaceToCode(this.workspace);
            console.log(code);
            var interpreter = new Interpreter(code, this.initApi);
            interpreter.run();
        };
        Activity1.prototype.initApi = function (interpreter, scope) {
            var wrapper = function (text) {
                text = text ? text.toString() : '';
                return interpreter.createPrimitive(window.alert(text));
            };
            interpreter.setProperty(scope, 'alert', interpreter.createNativeFunction(wrapper));
            wrapper = function (text) {
                text = text ? text.toString() : '';
                return interpreter.createPrimitive(myApp.setColor(text));
            };
            interpreter.setProperty(scope, 'SetColor', interpreter.createNativeFunction(wrapper));
            wrapper = function () {
                var test = interpreter.createPrimitive(MoveBallRight());
                return test;
            };
            interpreter.setProperty(scope, 'MoveBallRight', interpreter.createNativeFunction(wrapper));
            wrapper = function (text) {
                text = text ? text.toString() : '';
                var test = interpreter.createPrimitive(CreateLargeEntity(text));
                return test;
            };
            interpreter.setProperty(scope, 'CreateLargeEntity', interpreter.createNativeFunction(wrapper));
            wrapper = function (text, number, status) {
                text = text ? text.toString() : '';
                status = status ? status.toString() : "";
                var test = interpreter.createPrimitive(SetCharacteristics(text, number, status));
                return test;
            };
            interpreter.setProperty(scope, 'SetCharacteristics', interpreter.createNativeFunction(wrapper));
        };
        return Activity1;
    }());
    exports.Activity1 = Activity1;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,

define('activity2',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var myApp;
    var responseText;
    var targetHeading;
    var myApp;
    var ball1;
    var ball2;
    var cursor;
    var EntityProperties = {};
    function preload() {
        myApp.game.load.image('wizball', 'assets/wizball.png');
        myApp.game.load.image('redball', 'assets/redwizball.png');
        myApp.game.load.image('blueball', 'assets/bluewizball.png');
    }
    function create() {
        myApp.game.physics.startSystem(Phaser.Physics.ARCADE);
        myApp.healthyPersons = myApp.game.add.group();
        myApp.healthyPersons.enableBody = true;
        myApp.healthyPersons.physicsBodyType = Phaser.Physics.ARCADE;
        var scaleFactor = .1;
        for (var i = 0; i < 100; i++) {
            var c = myApp.healthyPersons.create(myApp.game.world.randomX, Math.random() * 600, 'wizball', myApp.game.rnd.integerInRange(0, 36));
            c.scale = new Phaser.Point(scaleFactor, scaleFactor);
            c.anchor.set(.5);
            c.name = 'healthyPerson' + i;
            c.body.collideWorldBounds = true;
            c.body.bounce.set(1);
        }
        myApp.infectedPersons = myApp.game.add.group();
        myApp.infectedPersons.enableBody = true;
        myApp.infectedPersons.physicsBodyType = Phaser.Physics.ARCADE;
        for (var i = 0; i < 5; i++) {
            var c = myApp.infectedPersons.create(myApp.game.world.randomX, Math.random() * 600, 'redball', myApp.game.rnd.integerInRange(0, 36));
            c.scale = new Phaser.Point(scaleFactor, scaleFactor);
            c.anchor.set(.5);
            c.name = 'infectedPerson' + i;
            c.body.collideWorldBounds = true;
            c.body.bounce.set(1);
        }
        myApp.healers = myApp.game.add.group();
        myApp.healers.enableBody = true;
        myApp.healers.physicsBodyType = Phaser.Physics.ARCADE;
        for (var i = 0; i < 25; i++) {
            var c = myApp.healers.create(myApp.game.world.randomX, Math.random() * 600, 'blueball', myApp.game.rnd.integerInRange(0, 36));
            c.scale = new Phaser.Point(scaleFactor, scaleFactor);
            c.anchor.set(.5);
            c.name = 'healer' + i;
            c.body.collideWorldBounds = true;
            c.body.bounce.set(1);
        }
    }
    function update() {
        myApp.game.physics.arcade.collide(myApp.healthyPersons, myApp.healthyPersons, null, null, this);
        myApp.game.physics.arcade.collide(myApp.infectedPersons, myApp.infectedPersons, null, null, this);
        myApp.game.physics.arcade.collide(myApp.healers, myApp.healers, null, null, this);
        myApp.game.physics.arcade.collide(myApp.healers, myApp.healthyPersons, null, null, this);
        myApp.game.physics.arcade.collide(myApp.healthyPersons, myApp.infectedPersons, myApp.HealthyInfectedCollision.bind(myApp), null, this);
        myApp.game.physics.arcade.collide(myApp.healers, myApp.infectedPersons, myApp.HealerInfectedCollision.bind(myApp), null, this);
        updateHeading(myApp.healthyPersons);
        updateHeading(myApp.infectedPersons);
        updateHeading(myApp.healers);
    }
    function SetCharacteristics(type, age) {
        EntityProperties.type = type;
        EntityProperties.age = age;
    }
    function GetCharacteristics() {
        var allXml = Blockly.Xml.workspaceToDom(myApp.workspace).childNodes;
        for (var i = 0; xml = allXml[i]; i++) {
            var xml = allXml[i];
            if (xml.getAttribute('type') == 'entity') {
                var in1 = xml.firstElementChild.firstElementChild;
                var headless = new Blockly.Workspace();
                Blockly.Xml.domToBlock(in1, headless);
                var code = Blockly.JavaScript.workspaceToCode(headless);
                var interpreter = new Interpreter(code, myApp.initApi);
                interpreter.run();
                headless.dispose();
            }
        }
    }
    function CreateLargeEntity(entityLabel) {
        GetCharacteristics();
        var sprite = EntityProperties.type;
        var c = myApp.game.add.sprite(200, 200, sprite);
        c.scale = new Phaser.Point(1, 1);
        c.anchor.set(.5);
        c.type = EntityProperties.type;
        c.age = EntityProperties.age;
        var style = { font: "16px Courier", fill: "#000000" };
        var text1 = myApp.game.add.text(0, 0, "Age: " + c.age.toString(), style);
        var text2 = myApp.game.add.text(0, 0, "Type: " + c.type, style);
        text1.alignTo(c, Phaser.RIGHT_TOP, 16);
        text2.alignTo(c, Phaser.RIGHT_CENTER, 16);
    }
    function MoveBallRight() {
        ball1.body.velocity.x = 100;
    }
    function ResetPhaser() {
        myApp.game.world.removeAll(true, false, false);
        create();
    }
    function updateHeading(gameObj) {
        try {
            gameObj.forEach(function (element) {
                if (Math.floor(Math.random() * 20) === 0) {
                    var angle = 90 * (Math.PI / 180);
                    var DIST = 200;
                    var offset = (Math.floor(Math.random() * angle) - angle / 2);
                    var newX = element.position.x + Math.cos(element.rotation + offset) * DIST;
                    var newY = element.position.y + Math.sin(element.rotation + offset) * DIST;
                    element.heading = {
                        x: newX,
                        y: newY
                    };
                    myApp.game.physics.arcade.moveToXY(element, element.heading.x, element.heading.y);
                    var dx = element.heading.x - element.position.x;
                    var dy = element.heading.y - element.position.y;
                    element.rotation = Math.atan2(dy, dx);
                }
            });
        }
        catch (err) {
            console.log(err.message);
        }
    }
    var Activity2 = (function () {
        function Activity2() {
            this.workspace = {};
            this.interpreter = {};
            this.game = {};
            this.healthyPersons = {};
            this.infectedPersons = {};
            this.healers = {};
            this.TimeStamp = 0;
            myApp = this;
        }
        Activity2.prototype.attached = function () {
            this.toolbox = this.LoadToolbox();
            this.game = new Phaser.Game(600, 600, Phaser.AUTO, 'phaserDiv', { preload: preload, create: create, update: update });
            this.TimeStamp = 0;
            this.SampleRate = 1;
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(this.initChartData);
        };
        Activity2.prototype.HttpClient = function () {
            this.get = function (aUrl, aCallback) {
                var anHttpRequest = new XMLHttpRequest();
                anHttpRequest.onreadystatechange = function () {
                    if (anHttpRequest.readyState == 4 && anHttpRequest.status == 200)
                        aCallback(anHttpRequest.responseText);
                };
                anHttpRequest.open("GET", aUrl, true);
                anHttpRequest.send(null);
            };
        };
        Activity2.prototype.updateChartData = function () {
            console.log("Updating Chart: " + myApp.TimeStamp.toString());
            myApp.TimeStamp += myApp.SampleRate;
            var healthyCount = myApp.healthyPersons.length;
            var sickCount = myApp.infectedPersons.length;
            myApp.ChartData.addRow([myApp.TimeStamp, healthyCount, sickCount]);
            myApp.drawChart();
        };
        Activity2.prototype.initChartData = function () {
            myApp.ChartData = new google.visualization.DataTable();
            myApp.ChartData.addColumn('number', 'Time');
            myApp.ChartData.addColumn('number', 'Healthy');
            myApp.ChartData.addColumn('number', 'Sick');
            myApp.TimerId = window.setInterval(myApp.updateChartData, myApp.SampleRate * 1000);
            myApp.drawChart();
        };
        Activity2.prototype.detached = function () {
            myApp.ChartData = new google.visualization.DataTable();
            myApp.ChartData.addColumn('number', 'Time');
            myApp.ChartData.addColumn('number', 'Healthy');
            myApp.ChartData.addColumn('number', 'Sick');
            window.clearInterval(myApp.TimerId);
            myApp.game.destroy();
        };
        Activity2.prototype.drawChart = function () {
            var data = myApp.ChartData;
            var options = {
                title: 'Sick vs Healthy',
                curveType: 'function',
                legend: { position: 'bottom' }
            };
            var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));
            chart.draw(data, options);
        };
        Activity2.prototype.SaveWorkspace = function () {
            var xml = Blockly.Xml.workspaceToDom(this.workspace);
            var xml_text = Blockly.Xml.domToPrettyText(xml);
            this.export(xml_text);
        };
        Activity2.prototype.export = function (text) {
            var pom = document.createElement('a');
            pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
            pom.setAttribute('download', 'workspace.xml');
            pom.style.display = 'none';
            document.body.appendChild(pom);
            pom.click();
            document.body.removeChild(pom);
        };
        Activity2.prototype.LoadWorkspaceCallback = function (ResponseText) {
            var xml_text = ResponseText;
            var xml = Blockly.Xml.textToDom(xml_text);
            myApp.workspace.clear();
            Blockly.Xml.domToWorkspace(xml, myApp.workspace);
        };
        Activity2.prototype.LoadWorkspace = function () {
            var url = "resources/workspace.xml";
            var client = new this.HttpClient();
            client.get(url, this.LoadWorkspaceCallback);
        };
        Activity2.prototype.LoadToolBoxCallback = function (ResponseText) {
            var xml_text = ResponseText;
            var xml = Blockly.Xml.textToDom(xml_text);
            myApp.toolbox = xml;
            myApp.workspace = Blockly.inject('blocklyDiv', { media: '../Blockly/media/',
                toolbox: myApp.toolbox });
        };
        Activity2.prototype.LoadToolbox = function () {
            var url = "resources/EpidemicToolbox.xml";
            var client = new this.HttpClient();
            client.get(url, this.LoadToolBoxCallback);
        };
        Activity2.prototype.ResetPhaser = function () {
            myApp.ChartData = new google.visualization.DataTable();
            myApp.ChartData.addColumn('number', 'Time');
            myApp.ChartData.addColumn('number', 'Healthy');
            myApp.ChartData.addColumn('number', 'Sick');
            myApp.TimeStamp = 0;
            myApp.game.world.removeAll(true, false, false);
            create();
        };
        Activity2.prototype.setColor = function (targetColor) {
            if (targetColor == "RED") {
                ball2.loadTexture('redball');
            }
            else if (targetColor == "BLUE") {
                ball2.loadTexture('blueball');
            }
            myApp.game.physics.arcade.collide(ball1, ball2);
        };
        Activity2.prototype.handleCollision = function () {
            var allXml = Blockly.Xml.workspaceToDom(this.workspace).childNodes;
            for (var i = 0; xml = allXml[i]; i++) {
                var xml = allXml[i];
                if (xml.getAttribute('type') == 'collision') {
                    var headless = new Blockly.Workspace();
                    Blockly.Xml.domToBlock(xml, headless);
                    var code = Blockly.JavaScript.workspaceToCode(headless);
                    var interpreter = new Interpreter(code, this.initApi);
                    interpreter.run();
                    headless.dispose();
                }
            }
        };
        Activity2.prototype.HealthyInfectedCollision = function (healthy, infected) {
            healthy.loadTexture('redball');
            myApp.healthyPersons.remove(healthy);
            myApp.infectedPersons.add(healthy);
        };
        Activity2.prototype.HealerInfectedCollision = function (healer, infected) {
            infected.loadTexture('wizball');
            myApp.infectedPersons.remove(infected);
            myApp.healthyPersons.add(infected);
        };
        Activity2.prototype.runSimulation = function () {
            myApp.ResetPhaser();
            var test = Blockly.JavaScript.workspaceToCode(this.workspace);
            console.log(test);
            var allXml = Blockly.Xml.workspaceToDom(this.workspace).childNodes;
            for (var i = 0; xml = allXml[i]; i++) {
                var xml = allXml[i];
                if (xml.getAttribute('type') == 'simulation') {
                    var headless = new Blockly.Workspace();
                    Blockly.Xml.domToBlock(xml, headless);
                    var code = Blockly.JavaScript.workspaceToCode(headless);
                    var interpreter = new Interpreter(code, this.initApi);
                    interpreter.run();
                    headless.dispose();
                }
            }
        };
        Activity2.prototype.runCode = function () {
            this.paralellTest();
            var code = Blockly.JavaScript.workspaceToCode(this.workspace);
            console.log(code);
            var interpreter = new Interpreter(code, this.initApi);
            interpreter.run();
        };
        Activity2.prototype.initApi = function (interpreter, scope) {
            var wrapper = function (text) {
                text = text ? text.toString() : '';
                return interpreter.createPrimitive(window.alert(text));
            };
            interpreter.setProperty(scope, 'alert', interpreter.createNativeFunction(wrapper));
            wrapper = function (text) {
                text = text ? text.toString() : '';
                return interpreter.createPrimitive(myApp.setColor(text));
            };
            interpreter.setProperty(scope, 'SetColor', interpreter.createNativeFunction(wrapper));
            wrapper = function () {
                var test = interpreter.createPrimitive(MoveBallRight());
                return test;
            };
            interpreter.setProperty(scope, 'MoveBallRight', interpreter.createNativeFunction(wrapper));
            wrapper = function (text) {
                text = text ? text.toString() : '';
                var test = interpreter.createPrimitive(CreateLargeEntity(text));
                return test;
            };
            interpreter.setProperty(scope, 'CreateLargeEntity', interpreter.createNativeFunction(wrapper));
            wrapper = function (text, number) {
                text = text ? text.toString() : '';
                var test = interpreter.createPrimitive(SetCharacteristics(text, number));
                return test;
            };
            interpreter.setProperty(scope, 'SetCharacteristics', interpreter.createNativeFunction(wrapper));
        };
        return Activity2;
    }());
    exports.Activity2 = Activity2;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,

define('app',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var App = (function () {
        function App() {
        }
        App.prototype.configureRouter = function (config, router) {
            config.title = 'Aurelia';
            config.map([
                { route: ['', 'home'], name: 'home', moduleId: './home', nav: true, title: 'Home' },
                { route: ['test'], name: 'test', moduleId: './test', nav: true, title: 'Test' },
                { route: ['activity1'], name: 'activity1', moduleId: './activity1', nav: true, title: 'Activity1' },
                { route: ['activity2'], name: 'activity2', moduleId: './activity2', nav: true, title: 'Activity2' }
            ]);
            this.router = router;
        };
        return App;
    }());
    exports.App = App;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFFQTtRQUFBO1FBaUJBLENBQUM7UUFiQyw2QkFBZSxHQUFmLFVBQWdCLE1BQU0sRUFBRSxNQUFNO1lBQzFCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO1lBRXpCLE1BQU0sQ0FBQyxHQUFHLENBQUM7Z0JBQ1IsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUMsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsUUFBUSxFQUFFLEdBQUcsRUFBQyxJQUFJLEVBQUUsS0FBSyxFQUFDLE1BQU0sRUFBRTtnQkFDL0UsRUFBRSxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBRyxJQUFJLEVBQUUsTUFBTSxFQUFHLFFBQVEsRUFBRSxRQUFRLEVBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUMsTUFBTSxFQUFFO2dCQUNqRixFQUFFLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFHLElBQUksRUFBRSxXQUFXLEVBQUcsUUFBUSxFQUFFLGFBQWEsRUFBRyxHQUFHLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBQyxXQUFXLEVBQUU7Z0JBQ3JHLEVBQUUsS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUcsSUFBSSxFQUFFLFdBQVcsRUFBRyxRQUFRLEVBQUUsYUFBYSxFQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDLFdBQVcsRUFBRTthQUV2RyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN4QixDQUFDO1FBQ0osVUFBQztJQUFELENBakJBLEFBaUJDLElBQUE7SUFqQlksa0JBQUciLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtSb3V0ZXJDb25maWd1cmF0aW9uLCBSb3V0ZXJ9IGZyb20gJ2F1cmVsaWEtcm91dGVyJztcblxuZXhwb3J0IGNsYXNzIEFwcCB7XG4gIFxuICByb3V0ZXI6Um91dGVyXG5cbiAgY29uZmlndXJlUm91dGVyKGNvbmZpZywgcm91dGVyKXtcbiAgICAgIGNvbmZpZy50aXRsZSA9ICdBdXJlbGlhJztcblx0XHRcbiAgICAgIGNvbmZpZy5tYXAoW1xuICAgICAgICAgeyByb3V0ZTogWycnLCdob21lJ10sIG5hbWU6ICdob21lJywgbW9kdWxlSWQ6Jy4vaG9tZScsIG5hdjp0cnVlLCB0aXRsZTonSG9tZScgfSxcbiAgICAgICAgIHsgcm91dGU6IFsndGVzdCddLCAgbmFtZTogJ3Rlc3QnLCAgbW9kdWxlSWQ6ICcuL3Rlc3QnLCAgbmF2OiB0cnVlLCB0aXRsZTonVGVzdCcgfSxcbiAgICAgICAgIHsgcm91dGU6IFsnYWN0aXZpdHkxJ10sICBuYW1lOiAnYWN0aXZpdHkxJywgIG1vZHVsZUlkOiAnLi9hY3Rpdml0eTEnLCAgbmF2OiB0cnVlLCB0aXRsZTonQWN0aXZpdHkxJyB9LFxuICAgICAgICAgeyByb3V0ZTogWydhY3Rpdml0eTInXSwgIG5hbWU6ICdhY3Rpdml0eTInLCAgbW9kdWxlSWQ6ICcuL2FjdGl2aXR5MicsICBuYXY6IHRydWUsIHRpdGxlOidBY3Rpdml0eTInIH1cbiAgICAgICAgIFxuICAgICAgXSk7XG5cbiAgICAgIHRoaXMucm91dGVyID0gcm91dGVyO1xuICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiJzcmMifQ==

define('environment',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        debug: true,
        testing: true
    };
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQUFBLGtCQUFlO1FBQ2IsS0FBSyxFQUFFLElBQUk7UUFDWCxPQUFPLEVBQUUsSUFBSTtLQUNkLENBQUMiLCJmaWxlIjoiZW52aXJvbm1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIGRlYnVnOiB0cnVlLFxuICB0ZXN0aW5nOiB0cnVlXG59O1xuIl0sInNvdXJjZVJvb3QiOiJzcmMifQ==

define('home',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Home = (function () {
        function Home() {
        }
        return Home;
    }());
    exports.Home = Home;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBQUE7UUFBQTtRQUFtQixDQUFDO1FBQUQsV0FBQztJQUFELENBQW5CLEFBQW9CLElBQUE7SUFBUCxvQkFBSSIsImZpbGUiOiJob21lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEhvbWUge30iXSwic291cmNlUm9vdCI6InNyYyJ9

define('main',["require", "exports", "./environment"], function (require, exports, environment_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(aurelia) {
        aurelia.use
            .standardConfiguration()
            .feature('resources');
        if (environment_1.default.debug) {
            aurelia.use.developmentLogging();
        }
        if (environment_1.default.testing) {
            aurelia.use.plugin('aurelia-testing');
        }
        aurelia.start().then(function () { return aurelia.setRoot(); });
    }
    exports.configure = configure;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBR0EsbUJBQTBCLE9BQWdCO1FBQ3hDLE9BQU8sQ0FBQyxHQUFHO2FBQ1IscUJBQXFCLEVBQUU7YUFDdkIsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRXhCLEVBQUUsQ0FBQyxDQUFDLHFCQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixFQUFFLENBQUM7UUFDbkMsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLHFCQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN4QixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFFRCxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQU0sT0FBQSxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBZEQsOEJBY0MiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXVyZWxpYX0gZnJvbSAnYXVyZWxpYS1mcmFtZXdvcmsnXG5pbXBvcnQgZW52aXJvbm1lbnQgZnJvbSAnLi9lbnZpcm9ubWVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maWd1cmUoYXVyZWxpYTogQXVyZWxpYSkge1xuICBhdXJlbGlhLnVzZVxuICAgIC5zdGFuZGFyZENvbmZpZ3VyYXRpb24oKVxuICAgIC5mZWF0dXJlKCdyZXNvdXJjZXMnKTtcblxuICBpZiAoZW52aXJvbm1lbnQuZGVidWcpIHtcbiAgICBhdXJlbGlhLnVzZS5kZXZlbG9wbWVudExvZ2dpbmcoKTtcbiAgfVxuXG4gIGlmIChlbnZpcm9ubWVudC50ZXN0aW5nKSB7XG4gICAgYXVyZWxpYS51c2UucGx1Z2luKCdhdXJlbGlhLXRlc3RpbmcnKTtcbiAgfVxuXG4gIGF1cmVsaWEuc3RhcnQoKS50aGVuKCgpID0+IGF1cmVsaWEuc2V0Um9vdCgpKTtcbn1cbiJdLCJzb3VyY2VSb290Ijoic3JjIn0=

define('test',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Test = (function () {
        function Test() {
        }
        return Test;
    }());
    exports.Test = Test;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBQUE7UUFBQTtRQUFtQixDQUFDO1FBQUQsV0FBQztJQUFELENBQW5CLEFBQW9CLElBQUE7SUFBUCxvQkFBSSIsImZpbGUiOiJ0ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFRlc3Qge30iXSwic291cmNlUm9vdCI6InNyYyJ9

define('resources/index',["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function configure(config) {
    }
    exports.configure = configure;
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc291cmNlcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFFQSxtQkFBMEIsTUFBOEI7SUFFeEQsQ0FBQztJQUZELDhCQUVDIiwiZmlsZSI6InJlc291cmNlcy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RnJhbWV3b3JrQ29uZmlndXJhdGlvbn0gZnJvbSAnYXVyZWxpYS1mcmFtZXdvcmsnO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlKGNvbmZpZzogRnJhbWV3b3JrQ29uZmlndXJhdGlvbikge1xuICAvL2NvbmZpZy5nbG9iYWxSZXNvdXJjZXMoW10pO1xufVxuIl0sInNvdXJjZVJvb3QiOiJzcmMifQ==

define('text!activity1.html', ['module'], function(module) { module.exports = "<template><script src=\"phaser.min.js\"></script><div id=\"ControlsPanel\"><button click.trigger=\"runSimulation()\">Run</button> <button click.trigger=\"ResetPhaser()\">Reset</button><br><button click.trigger=\"SaveWorkspace()\">Save Workspace</button> <button click.trigger=\"LoadWorkspace()\">Load Workspace</button></div><div id=\"phaserDiv\" style=\"height:600px;width:600px;display:inline-block\"></div><div id=\"blocklyDiv\" style=\"height:600px;width:600px;display:inline-block\"></div><br></template>"; });
define('text!activity2.html', ['module'], function(module) { module.exports = "<template><div id=\"ControlsPanel\"><button click.trigger=\"runSimulation()\">Run</button> <button click.trigger=\"ResetPhaser()\">Reset</button><br><button click.trigger=\"SaveWorkspace()\">Save Workspace</button> <button click.trigger=\"LoadWorkspace()\">Load Workspace</button></div><div id=\"phaserDiv\" style=\"height:600px;width:600px;display:inline-block\"></div><div id=\"blocklyDiv\" style=\"height:600px;width:600px;display:inline-block\"></div><div id=\"curve_chart\" style=\"width:900px;height:500px\"></div><br></template>"; });
define('text!app.html', ['module'], function(module) { module.exports = "<template><nav><ul><li repeat.for=\"row of router.navigation\"><a href.bind=\"row.href\">${row.title}</a></li></ul></nav><router-view></router-view></template>"; });
define('text!home.html', ['module'], function(module) { module.exports = "<template><h1>Home Page</h1></template>"; });
define('text!test.html', ['module'], function(module) { module.exports = "<template><h1>Test Page</h1></template>"; });
//# sourceMappingURL=app-bundle.js.map